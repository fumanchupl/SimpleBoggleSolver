/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fumanchu.simplebogglesolver;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.SortedMap;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListDataListener;

/**
 *
 * @author Fu Manchu
 */
public class SolverGUI extends javax.swing.JFrame {

  /**
   * Creates new form SolverGUI
   */
  public SolverGUI() {
    initComponents();
    board = new BoggleBoard(4, 4);
    boardPanel = new BoardPanel();
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    panelBoggleBoard.add(boardPanel, c);
    boardPanel.setBoard();
    if (null == solver) {
      statusBar.setText("No dictionary loaded.");
      statusBar.setForeground(Color.RED);
    }
  }

  public SolverGUI(String dictPath) {
    this();
    DictionaryLoader d = new DictionaryLoader(dictPath);
    solver = new Solver(d.dictionary());
    statusBar.setForeground(Color.BLACK);
    statusBar.setText(String.format("Dictionary size: %d", d.size()));
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jfc = new javax.swing.JFileChooser();
    panelWords = new javax.swing.JPanel();
    scrollPanel = new javax.swing.JPanel();
    scrollPane = new javax.swing.JScrollPane();
    listResults = new javax.swing.JList();
    panelGame = new javax.swing.JPanel();
    panelEditBoard = new javax.swing.JPanel();
    fieldBoard = new javax.swing.JTextField();
    buttonCreateBoard = new javax.swing.JButton();
    panelBoggleBoard = new javax.swing.JPanel();
    buttonSolve = new javax.swing.JButton();
    buttonReset = new javax.swing.JButton();
    statusBar = new javax.swing.JLabel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    loadDict = new javax.swing.JMenuItem();
    loadBoard = new javax.swing.JMenuItem();

    jfc.setCurrentDirectory(new java.io.File("."));

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Simple Boggle Solver");
    setMinimumSize(new java.awt.Dimension(600, 500));
    getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

    panelWords.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Word list", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12))); // NOI18N
    panelWords.setMinimumSize(new java.awt.Dimension(150, 100));
    panelWords.setPreferredSize(new java.awt.Dimension(150, 100));
    panelWords.setLayout(new java.awt.BorderLayout(10, 10));

    scrollPanel.setLayout(new java.awt.BorderLayout());

    scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    scrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
    scrollPane.setPreferredSize(new java.awt.Dimension(120, 180));

    listResults.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    listResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    listResults.setMinimumSize(null);
    listResults.setPreferredSize(null);
    listResults.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        listResultsValueChanged(evt);
      }
    });
    scrollPane.setViewportView(listResults);

    scrollPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

    panelWords.add(scrollPanel, java.awt.BorderLayout.CENTER);

    getContentPane().add(panelWords, java.awt.BorderLayout.LINE_START);

    panelGame.setLayout(new java.awt.BorderLayout(10, 10));

    panelEditBoard.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit board", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12))); // NOI18N
    panelEditBoard.setLayout(new java.awt.BorderLayout(2, 2));

    fieldBoard.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    fieldBoard.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        fieldBoardKeyPressed(evt);
      }
    });
    panelEditBoard.add(fieldBoard, java.awt.BorderLayout.CENTER);

    buttonCreateBoard.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    buttonCreateBoard.setText("Create");
    buttonCreateBoard.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCreateBoardActionPerformed(evt);
      }
    });
    panelEditBoard.add(buttonCreateBoard, java.awt.BorderLayout.LINE_END);

    panelGame.add(panelEditBoard, java.awt.BorderLayout.PAGE_START);

    panelBoggleBoard.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Board", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12))); // NOI18N
    panelBoggleBoard.setLayout(new java.awt.GridBagLayout());

    buttonSolve.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    buttonSolve.setText("SOLVE");
    buttonSolve.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSolveActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    panelBoggleBoard.add(buttonSolve, gridBagConstraints);

    buttonReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    buttonReset.setText("RESET BOARD");
    buttonReset.setActionCommand("RESET BOARD");
    buttonReset.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonResetActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    panelBoggleBoard.add(buttonReset, gridBagConstraints);

    panelGame.add(panelBoggleBoard, java.awt.BorderLayout.CENTER);

    getContentPane().add(panelGame, java.awt.BorderLayout.CENTER);

    statusBar.setText("tst");
    statusBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    statusBar.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    getContentPane().add(statusBar, java.awt.BorderLayout.PAGE_END);

    fileMenu.setText("File");

    loadDict.setText("Load Dictionary");
    loadDict.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        loadDictActionPerformed(evt);
      }
    });
    fileMenu.add(loadDict);

    loadBoard.setText("Load Board");
    loadBoard.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        loadBoardActionPerformed(evt);
      }
    });
    fileMenu.add(loadBoard);

    menuBar.add(fileMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void loadDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDictActionPerformed
    if (JFileChooser.APPROVE_OPTION == jfc.showOpenDialog(this)) {
      try {
        statusBar.setForeground(Color.BLACK);
        DictionaryLoader dic = new DictionaryLoader(jfc.getSelectedFile().getCanonicalPath());
        solver = new Solver(dic.dictionary());
        statusBar.setText(String.format("Dictionary size: %d", dic.size()));
      } catch (java.io.IOException ex) {
        statusBar.setText("No dictionary loaded.");
        statusBar.setForeground(Color.RED);
        JOptionPane.showMessageDialog(this, "Couldn't load dictionary");
      }
    }
  }//GEN-LAST:event_loadDictActionPerformed

  private void loadBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBoardActionPerformed
    if (JFileChooser.APPROVE_OPTION == jfc.showOpenDialog(this)) {
      try {
        boardPanel.clearBoard();
        if (listResults.getModel().getSize() > 0) {
          ((MyListModel) listResults.getModel()).clear();
        }
        board = new BoggleBoard(jfc.getSelectedFile().getCanonicalPath());
        boardPanel.setBoard();
      } catch (java.io.IOException ex) {
        System.err.println("Couldn't load board");
      }
    }
  }//GEN-LAST:event_loadBoardActionPerformed

  private void buttonSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSolveActionPerformed
    solve();
  }//GEN-LAST:event_buttonSolveActionPerformed

  private void listResultsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listResultsValueChanged
    if (!evt.getValueIsAdjusting()) {
      selectWord();
    }
  }//GEN-LAST:event_listResultsValueChanged

  private void buttonCreateBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateBoardActionPerformed
    pressCreate();
  }//GEN-LAST:event_buttonCreateBoardActionPerformed

  private void fieldBoardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldBoardKeyPressed
    if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
      pressCreate();
    }
  }//GEN-LAST:event_fieldBoardKeyPressed

  private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
    pressCreate();
  }//GEN-LAST:event_buttonResetActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(final String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(SolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(SolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(SolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(SolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        if (args.length == 0) {
          new SolverGUI().setVisible(true);
        } else {
          new SolverGUI(args[0]).setVisible(true);
        }
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCreateBoard;
  private javax.swing.JButton buttonReset;
  private javax.swing.JButton buttonSolve;
  private javax.swing.JTextField fieldBoard;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JFileChooser jfc;
  private javax.swing.JList listResults;
  private javax.swing.JMenuItem loadBoard;
  private javax.swing.JMenuItem loadDict;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JPanel panelBoggleBoard;
  private javax.swing.JPanel panelEditBoard;
  private javax.swing.JPanel panelGame;
  private javax.swing.JPanel panelWords;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JPanel scrollPanel;
  private javax.swing.JLabel statusBar;
  // End of variables declaration//GEN-END:variables
  private final int BOARD_ROWS = 4;
  private final int BOARD_COLS = 4;
  private BoggleBoard board;
  private Solver solver;
  private BoardPanel boardPanel;
  private int[] path;

  private void pressCreate() {
    StringBuilder sb = new StringBuilder(fieldBoard.getText().trim().toUpperCase());
    for (int i=0; i<sb.length(); ++i){
      if (!(('A'<=sb.charAt(i) && sb.charAt(i) <= 'Z') || 
              sb.charAt(i) == 'Ą' ||
              sb.charAt(i) == 'Ć' ||
              sb.charAt(i) == 'Ę' ||
              sb.charAt(i) == 'Ł' ||
              sb.charAt(i) == 'Ń' ||
              sb.charAt(i) == 'Ó' ||
              sb.charAt(i) == 'Ś' ||
              sb.charAt(i) == 'Ź' ||
              sb.charAt(i) == 'Ż')) {
        sb.deleteCharAt(i);
      }
    }
    String boardString = sb.toString();
    if (boardString.length() == 0) {
      board = new BoggleBoard(BOARD_COLS, BOARD_ROWS);
      boardPanel.setBoard();
    }
    else if (boardString.length() < BOARD_COLS * BOARD_COLS) {
      statusBar.setText("Board too small.");
    } else {
      char[][] a = new char[BOARD_ROWS][BOARD_COLS];
      for (int i = 0; i < BOARD_ROWS; ++i) {
        for (int j = 0; j < BOARD_COLS; ++j) {
          a[i][j] = boardString.charAt(i * BOARD_COLS + j);
        }
      }
      board = new BoggleBoard(a);
      boardPanel.setBoard();
      solve();
    }
  }
  
  private void solve() {
    if (null == solver) {
      JOptionPane.showMessageDialog(this, "Please load the dictionary first.");
      return;
    }
    listResults.setModel(new MyListModel(solver.getAllValidWords(board)));
    if (listResults.getModel().getSize() > 0) {
      listResults.setSelectedIndex(0);
      selectWord();
    }
    //boardPanel.removeTileListeners();
  }
  
  private void selectWord() {
    if (listResults.getSelectedIndex() >= 0) {
      path = ((MyListModel) listResults.getModel()).get(listResults.getSelectedIndex());
      boardPanel.clearBoard();
      boardPanel.highlightCubes();
      listResults.ensureIndexIsVisible(listResults.getSelectedIndex());
    }
  }

  private class BoardPanel extends JPanel {

    private final int NUM_OF_TILES = BOARD_ROWS * BOARD_COLS;
    private final JLabel[] tiles = new JLabel[NUM_OF_TILES];
    private final int TILE_DIM = 60;
    //private final TileMouseListener tileMouseListener;

    /**
     * Constructor for the board which the user interacts with in order to play
     * Boggle
     */
    public BoardPanel() {
      GridLayout cubeLayout = new GridLayout(BOARD_ROWS, BOARD_COLS);
      this.setPreferredSize(new Dimension(TILE_DIM * BOARD_COLS, TILE_DIM * BOARD_ROWS));
      this.setMinimumSize(this.getPreferredSize());
      this.setMaximumSize(this.getPreferredSize());
      this.setLayout(cubeLayout);
      for (int i = 0; i < NUM_OF_TILES; i++) {
        tiles[i] = new JLabel("", JLabel.CENTER);
        tiles[i].setFont(new Font("SansSerif", Font.PLAIN, 28));
        tiles[i].setPreferredSize(new Dimension(TILE_DIM, TILE_DIM));
        tiles[i].setMinimumSize(tiles[i].getPreferredSize());
        tiles[i].setMaximumSize(tiles[i].getPreferredSize());
        tiles[i].setBorder(BorderFactory.createRaisedBevelBorder());
        tiles[i].setOpaque(true);
        tiles[i].setBackground(new Color(146, 183, 219));
        this.add(tiles[i]);
      }
      //tileMouseListener = new TileMouseListener();
    }

    /**
     * Clear the selected blocks (change from highlighted to not highlighted)
     */
    public void clearBoard() {
      for (int i = 0; i < tiles.length; ++i) {
        tiles[i].setBackground(new Color(146, 183, 219));
        //tiles[i].removeMouseListener(tileMouseListener);
      }
    }

    /**
     * Set the board with a String array
     *
     */
    public void setBoard() {
      clearBoard();
      for (int i = 0; i < BOARD_ROWS; i++) {
        for (int j = 0; j < BOARD_COLS; j++) {
          char letter = board.getLetter(i, j);
          tiles[i * BOARD_COLS + j].setText("" + letter);
          //tiles[i * BOARD_COLS + j].addMouseListener(tileMouseListener);
        }
      }
    }

    /**
     * Highlight all the cubes in the path array
     */
    public void highlightCubes() {
      for (int i = 0; i < path.length; i++) {
        if (0 == i) {
          tiles[path[i]].setBackground(new Color(80, 240, 80));
        } else {
          tiles[path[i]].setBackground(new Color(232, 237, 76));
        }
        repaint();
      }
    }

    @Override
    public void paint(Graphics g) {
      super.paint(g);
      update(g);
    }

    @Override
    public void update(Graphics g) {
      Graphics2D g2d = (Graphics2D)g;
      if (null != path && path.length > 0) {
        int xs[] = new int[path.length];
        int ys[] = new int[path.length];
        for (int i = 0; i < path.length; i++) {
          xs[i] = tiles[path[i]].getX() + (tiles[path[i]].getWidth() / 2);
          ys[i] = tiles[path[i]].getY() + (tiles[path[i]].getHeight() / 2);
        }
        g2d.setPaint(new Color(0x7FB700B7));
        g2d.setStroke(new BasicStroke(3.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        g2d.drawPolyline(xs, ys, path.length);
      }
    }

//    private void removeTileListeners() {
//      for (int i = 0; i < tiles.length; ++i) {
//        tiles[i].removeMouseListener(tileMouseListener);
//      }
//    }
  }

  private class MyListModel extends AbstractListModel {

    private final SortedMap<String, List<Integer>> delegate;

    public MyListModel(SortedMap<String, List<Integer>> map) {
      delegate = map;
      fireIntervalAdded(this, 0, map.size());
    }

    @Override
    public int getSize() {
      return delegate.size();
    }

    @Override
    public Object getElementAt(int index) {
      String[] keys = new String[delegate.size()];
      keys = delegate.keySet().toArray(keys);
      return keys[index];
    }

    @Override
    public void addListDataListener(ListDataListener l) {
      super.addListDataListener(l);
    }

    @Override
    public void removeListDataListener(ListDataListener l) {
      super.removeListDataListener(l);
    }

    public void clear() {
      int end = delegate.size() - 1;
      delegate.clear();
      if (end >= 0) {
        fireIntervalRemoved(this, 0, end);
      }
    }

    public int[] get(String key) {
      List<Integer> l = delegate.get(key);
      int[] path = new int[l.size()];
      for (int i = 0; i < l.size(); ++i) {
        path[i] = l.get(i);
      }
      return path;
    }

    public int[] get(int index) {
      String[] keys = new String[delegate.size()];
      keys = delegate.keySet().toArray(keys);
      List<Integer> l = delegate.get(keys[index]);
      int[] path = new int[l.size()];
      for (int i = 0; i < l.size(); ++i) {
        path[i] = l.get(i);
      }
      return path;
    }
  }
  
}
